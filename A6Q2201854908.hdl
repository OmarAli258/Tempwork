CHIP A6Q2201854908 {
    IN a, b, c, d;
    OUT f;
    
    PARTS:
    
    // Implement NOT gates using NAND (since NAND is always available)
    NAND(a=a, b=a, out=nota);
    NAND(a=b, b=b, out=notb);
    NAND(a=c, b=c, out=notc);
    NAND(a=d, b=d, out=notd);
    
    // Compute intermediate terms
    OR(a=c, b=d, out=or1);               // or1 = c OR d
    AND(a=nota, b=notb, c=or1, out=term1); // term1 = ¬a ∧ ¬b ∧ (c ∨ d)
    
    AND(a=notc, b=notd, out=and1);        // and1 = ¬c ∧ ¬d
    AND(a=c, b=notd, out=and2);           // and2 = c ∧ ¬d
    OR(a=and1, b=and2, out=or2);          // or2 = (¬c ∧ ¬d) ∨ (c ∧ ¬d)
    AND(a=nota, b=b, c=or2, out=term2);   // term2 = ¬a ∧ b ∧ ((¬c ∧ ¬d) ∨ (c ∧ ¬d))
    
    AND(a=a, b=notb, c=notc, d=notd, out=term3); // term3 = a ∧ ¬b ∧ ¬c ∧ ¬d
    
    // Final OR gate to combine all terms
    OR(a=term1, b=term2, c=term3, out=f);
}
