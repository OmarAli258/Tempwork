CHIP A6Q2201854908 {
    IN a, b, c, d;
    OUT f;
    
    PARTS:
    // NOT gates
    Not(in=a, out=nota);
    Not(in=b, out=notb);
    Not(in=c, out=notc);
    Not(in=d, out=notd);

    // AND gates for minterms
    And(a=nota, b=notb, out=term1ab); 
    And(a=term1ab, b=notc, out=term1abc); 
    And(a=term1abc, b=d, out=term1);    

    And(a=nota, b=notb, out=term2ab); 
    And(a=term2ab, b=c, out=term2abc); 
    And(a=term2abc, b=notd, out=term2); 

    And(a=nota, b=notb, out=term3ab); 
    And(a=term3ab, b=c, out=term3abc); 
    And(a=term3abc, b=d, out=term3);    

    And(a=nota, b=b, out=term4ab); 
    And(a=term4ab, b=notc, out=term4abc); 
    And(a=term4abc, b=notd, out=term4); 

    And(a=nota, b=b, out=term5ab); 
    And(a=term5ab, b=c, out=term5abc); 
    And(a=term5abc, b=notd, out=term5); 

    And(a=a, b=notb, out=term6ab); 
    And(a=term6ab, b=notc, out=term6abc); 
    And(a=term6abc, b=notd, out=term6); 

    // OR gates to combine all terms
    Or(a=term1, b=term2, out=or1);
    Or(a=or1, b=term3, out=or2);
    Or(a=or2, b=term4, out=or3);
    Or(a=or3, b=term5, out=or4);
    Or(a=or4, b=term6, out=f);
}
